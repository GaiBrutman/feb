{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to FEB FEB Explores Binaries. Exploration consists of two parts: Travel: Moving through the binary to a specific location Extraction: Extracting a value from the expression at the current location Example Considering the following disassembly view: 0 push rbp 1 mov rbp , rsp 2 sub rsp , 0x10 3 mov edi , 0x50 4 call sym.imp.malloc 5 mov qword [ var_8h ], rax 6 lea rdi , str.Please_enter_your_name : 7 mov al , 0 Traveling to the next lea rdi instruction will get us to location 6 . Now moving 1 instruction will travel to the next expression ( 7 ). After traveling, we axtract the value of the second operand - 0 More info in API.md .","title":"Overview"},{"location":"#welcome-to-feb","text":"FEB Explores Binaries. Exploration consists of two parts: Travel: Moving through the binary to a specific location Extraction: Extracting a value from the expression at the current location","title":"Welcome to FEB"},{"location":"#example","text":"Considering the following disassembly view: 0 push rbp 1 mov rbp , rsp 2 sub rsp , 0x10 3 mov edi , 0x50 4 call sym.imp.malloc 5 mov qword [ var_8h ], rax 6 lea rdi , str.Please_enter_your_name : 7 mov al , 0 Traveling to the next lea rdi instruction will get us to location 6 . Now moving 1 instruction will travel to the next expression ( 7 ). After traveling, we axtract the value of the second operand - 0 More info in API.md .","title":"Example"},{"location":"API/","text":"FEB API As stated before , FEB travels inside a binary, then extracts values from it. Cursor The basic part of traveling is the cursor. A cursor is basically an integer representing the current location inside the binary. c = Cursor ( 0x1234 ) c += 1 # Cursor(0x1235) The binary cursor is always the absolute non-rebased offset of the file. Because an executable is commonly rebased to a certain offset, a RebasedCursor can be used. The RebasedCursor follows it's inner cursor and maps the cursor values to it's base offset. c = Cursor ( 5 ) rebased_c = RebasedCursor ( c , base = 10 ) c . value += 1 # 6 rebased_c . value # 16 rebased_c += 1 # RebasedCursor(17) c . value # 7 Expressions and Operands The extraction process is performed using Expression s and Operand s. An Expression represents a singular code unit, that holds Operand s. For example, in disassembly, an expression can be an assembly instruction: expression = AsmInstruction ( \"mov ax, 1\" ) And operands can be any part of the expression that can produce a value: # [X86Register(\"ax\"), Integer(1)] operands = expression . get_operands () Binary A binary holds shared information about the binary state. The main usage of Binary is to share a Cursor between different View s. binary = Binary ( \"executable.bin\" ) binary . cursor += 1 Code View The exploration occurs inside a View . A View can be a disassembly, decompilation or any lexical representation a binary (even raw bytes). view = DisassemblyView ( binary ) To move seamlessly between views, the Cursor is the binary offset in bytes, independent of views. binary . cursor = 0x1000 byte_view = BytesView ( binary ) dis_view = DisassemblyView ( binary ) byte_view . move_by ( 1 ) assert binary . cursor == 0x1001 dis_view . move_by ( 1 ) # Lets assume the next instruction is 4 bytes long assert binary . cursor == 0x1005 Analyzers There are many tools that analyze binaries. FEB Tries to allow use of any of them. When wrapping an analysis tool, we make use of the Analyzer and Session classes. An Analyzer represents a global analysis type, and a Session is specific for one binary. analyzer = CoolAnalyzer ( options ) session1 = analyzer . load ( \"./binary1\" ) session2 = analyzer . load ( \"./binary2\" )","title":"API"},{"location":"API/#feb-api","text":"As stated before , FEB travels inside a binary, then extracts values from it.","title":"FEB API"},{"location":"API/#cursor","text":"The basic part of traveling is the cursor. A cursor is basically an integer representing the current location inside the binary. c = Cursor ( 0x1234 ) c += 1 # Cursor(0x1235) The binary cursor is always the absolute non-rebased offset of the file. Because an executable is commonly rebased to a certain offset, a RebasedCursor can be used. The RebasedCursor follows it's inner cursor and maps the cursor values to it's base offset. c = Cursor ( 5 ) rebased_c = RebasedCursor ( c , base = 10 ) c . value += 1 # 6 rebased_c . value # 16 rebased_c += 1 # RebasedCursor(17) c . value # 7","title":"Cursor"},{"location":"API/#expressions-and-operands","text":"The extraction process is performed using Expression s and Operand s. An Expression represents a singular code unit, that holds Operand s. For example, in disassembly, an expression can be an assembly instruction: expression = AsmInstruction ( \"mov ax, 1\" ) And operands can be any part of the expression that can produce a value: # [X86Register(\"ax\"), Integer(1)] operands = expression . get_operands ()","title":"Expressions and Operands"},{"location":"API/#binary","text":"A binary holds shared information about the binary state. The main usage of Binary is to share a Cursor between different View s. binary = Binary ( \"executable.bin\" ) binary . cursor += 1","title":"Binary"},{"location":"API/#code-view","text":"The exploration occurs inside a View . A View can be a disassembly, decompilation or any lexical representation a binary (even raw bytes). view = DisassemblyView ( binary ) To move seamlessly between views, the Cursor is the binary offset in bytes, independent of views. binary . cursor = 0x1000 byte_view = BytesView ( binary ) dis_view = DisassemblyView ( binary ) byte_view . move_by ( 1 ) assert binary . cursor == 0x1001 dis_view . move_by ( 1 ) # Lets assume the next instruction is 4 bytes long assert binary . cursor == 0x1005","title":"Code View"},{"location":"API/#analyzers","text":"There are many tools that analyze binaries. FEB Tries to allow use of any of them. When wrapping an analysis tool, we make use of the Analyzer and Session classes. An Analyzer represents a global analysis type, and a Session is specific for one binary. analyzer = CoolAnalyzer ( options ) session1 = analyzer . load ( \"./binary1\" ) session2 = analyzer . load ( \"./binary2\" )","title":"Analyzers"},{"location":"license/","text":"MIT License Copyright (c) 2022 Gai.Brutman Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"reference/SUMMARY/","text":"feb core analysis binary cursor expression view","title":"SUMMARY"},{"location":"reference/feb/core/analysis/","text":"This modules hold the analysis logic. Analyzer A binary analyzer. Can load multiple sessions. Analyzer options are global for all sessions. load abstractmethod load ( path ) Loads a binary. Parameters: Name Type Description Default path The path to the binary. required Returns: Type Description Session A Session instance of the binary being analyzed. Session A binary analysis session. Used to perform analysis actions on an open binary. binary property abstractmethod binary () The open binary of this analysis session. Returns: Type Description The Binary object of this session. close abstractmethod close () Close a session.","title":"analysis"},{"location":"reference/feb/core/analysis/#feb.core.analysis.Analyzer","text":"A binary analyzer. Can load multiple sessions. Analyzer options are global for all sessions.","title":"Analyzer"},{"location":"reference/feb/core/analysis/#feb.core.analysis.Analyzer.load","text":"load ( path ) Loads a binary. Parameters: Name Type Description Default path The path to the binary. required Returns: Type Description Session A Session instance of the binary being analyzed.","title":"load()"},{"location":"reference/feb/core/analysis/#feb.core.analysis.Session","text":"A binary analysis session. Used to perform analysis actions on an open binary.","title":"Session"},{"location":"reference/feb/core/analysis/#feb.core.analysis.Session.binary","text":"binary () The open binary of this analysis session. Returns: Type Description The Binary object of this session.","title":"binary()"},{"location":"reference/feb/core/analysis/#feb.core.analysis.Session.close","text":"close () Close a session.","title":"close()"},{"location":"reference/feb/core/binary/","text":"This module holds the Binary class, which represents an open binary state. Binary Binary ( name , entry = 0 ) The Binary class represents an open binary. It holds global information about the binary, it's entry and current cursor for example. cursor writable property cursor () The current offset of the explored binary (in bytes). Returns: Type Description Cursor A cursor object of the binary current location. entry property entry () A cursor of the binary entry point. Does not change. Returns: Type Description A Cursor object of the binary entry point.","title":"binary"},{"location":"reference/feb/core/binary/#feb.core.binary.Binary","text":"Binary ( name , entry = 0 ) The Binary class represents an open binary. It holds global information about the binary, it's entry and current cursor for example.","title":"Binary"},{"location":"reference/feb/core/binary/#feb.core.binary.Binary.cursor","text":"cursor () The current offset of the explored binary (in bytes). Returns: Type Description Cursor A cursor object of the binary current location.","title":"cursor()"},{"location":"reference/feb/core/binary/#feb.core.binary.Binary.entry","text":"entry () A cursor of the binary entry point. Does not change. Returns: Type Description A Cursor object of the binary entry point.","title":"entry()"},{"location":"reference/feb/core/cursor/","text":"This module implements the binary cursor interfaces. Cursor Cursor ( value = 0 ) A Cursor represents the current offset inside a binary. value writable property value () The inner cursor value. RebasedCursor RebasedCursor ( cursor , base ) Bases: Cursor A cursor rebased to an inner cursor value Initialize a RebasedCursor. Parameters: Name Type Description Default cursor Cursor The inner cursor reference to follow. required base The baseline to rebase the inner cursor values to. required","title":"cursor"},{"location":"reference/feb/core/cursor/#feb.core.cursor.Cursor","text":"Cursor ( value = 0 ) A Cursor represents the current offset inside a binary.","title":"Cursor"},{"location":"reference/feb/core/cursor/#feb.core.cursor.Cursor.value","text":"value () The inner cursor value.","title":"value()"},{"location":"reference/feb/core/cursor/#feb.core.cursor.RebasedCursor","text":"RebasedCursor ( cursor , base ) Bases: Cursor A cursor rebased to an inner cursor value Initialize a RebasedCursor. Parameters: Name Type Description Default cursor Cursor The inner cursor reference to follow. required base The baseline to rebase the inner cursor values to. required","title":"RebasedCursor"},{"location":"reference/feb/core/expression/","text":"This module hold the logic for accessing the binary information - through Expressions and Operands. Expression A code expression. An expression can hold operands that can be extracted from it. get_operands abstractmethod get_operands () Gets the operands of the expression. Returns: Type Description Iterable [ Operand ] An iterable of the operands of the expression. text property abstractmethod text () The textual representation of the expression. Operand An Operand inside an Expression. Used to extract different values from the expression. get_text get_text () Gets the text of the operand from it's line. Returns: Type Description str The text of the operand. line property abstractmethod line () The whole line that contains the operand. Returns: Type Description str The line that contains the operand; slice property abstractmethod slice () The range of the operand text inside of the whole line. Returns: Type Description slice A slice object to slice the operand line.","title":"expression"},{"location":"reference/feb/core/expression/#feb.core.expression.Expression","text":"A code expression. An expression can hold operands that can be extracted from it.","title":"Expression"},{"location":"reference/feb/core/expression/#feb.core.expression.Expression.get_operands","text":"get_operands () Gets the operands of the expression. Returns: Type Description Iterable [ Operand ] An iterable of the operands of the expression.","title":"get_operands()"},{"location":"reference/feb/core/expression/#feb.core.expression.Expression.text","text":"text () The textual representation of the expression.","title":"text()"},{"location":"reference/feb/core/expression/#feb.core.expression.Operand","text":"An Operand inside an Expression. Used to extract different values from the expression.","title":"Operand"},{"location":"reference/feb/core/expression/#feb.core.expression.Operand.get_text","text":"get_text () Gets the text of the operand from it's line. Returns: Type Description str The text of the operand.","title":"get_text()"},{"location":"reference/feb/core/expression/#feb.core.expression.Operand.line","text":"line () The whole line that contains the operand. Returns: Type Description str The line that contains the operand;","title":"line()"},{"location":"reference/feb/core/expression/#feb.core.expression.Operand.slice","text":"slice () The range of the operand text inside of the whole line. Returns: Type Description slice A slice object to slice the operand line.","title":"slice()"},{"location":"reference/feb/core/view/","text":"This module represents a binary view - a textual representation of the binary that can be iterated over. View View ( binary ) The base class for code views. binary property binary () The view binary object. get_expression abstractmethod get_expression () Get an expression at the current position, if available. This function should not change the cursor position. Returns: Type Description Optional [ Expression ] An expression at the current position. move abstractmethod move ( count ) Move the view by count expressions. Can move backwards. Parameters: Name Type Description Default count int The number of expressions to move by. required Raises: Type Description IndexError When the view cannot be moved by the requested count, it will raise IndexError and will not change the cursor. save_state save_state () Backs up the state of the view, restoring it when the context is done. walk walk ( limit = None , reverse = False ) Walk through the view's expressions. Either forward or backward. :yield: The next expression. Parameters: Name Type Description Default limit _type_, optional (optional) The maximum number of expressions to yield. None reverse Whether to walk backwards, defaults to False False","title":"view"},{"location":"reference/feb/core/view/#feb.core.view.View","text":"View ( binary ) The base class for code views.","title":"View"},{"location":"reference/feb/core/view/#feb.core.view.View.binary","text":"binary () The view binary object.","title":"binary()"},{"location":"reference/feb/core/view/#feb.core.view.View.get_expression","text":"get_expression () Get an expression at the current position, if available. This function should not change the cursor position. Returns: Type Description Optional [ Expression ] An expression at the current position.","title":"get_expression()"},{"location":"reference/feb/core/view/#feb.core.view.View.move","text":"move ( count ) Move the view by count expressions. Can move backwards. Parameters: Name Type Description Default count int The number of expressions to move by. required Raises: Type Description IndexError When the view cannot be moved by the requested count, it will raise IndexError and will not change the cursor.","title":"move()"},{"location":"reference/feb/core/view/#feb.core.view.View.save_state","text":"save_state () Backs up the state of the view, restoring it when the context is done.","title":"save_state()"},{"location":"reference/feb/core/view/#feb.core.view.View.walk","text":"walk ( limit = None , reverse = False ) Walk through the view's expressions. Either forward or backward. :yield: The next expression. Parameters: Name Type Description Default limit _type_, optional (optional) The maximum number of expressions to yield. None reverse Whether to walk backwards, defaults to False False","title":"walk()"}]}